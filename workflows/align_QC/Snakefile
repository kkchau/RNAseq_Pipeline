"""
__authors__: Kevin Chau, Hanqing Zhao
__date__: 2019-04-17
__description__: This file contains rules for RNA-Seq quality control of the
BAM files after alignment, using picard tools, featureCounts, and samtools.
"""
import os
configfile: "../../config.yaml"
# Sub-Workflows

subworkflow alignment:
    workdir: "../alignment"
    snakefile: "../alignment/Snakefile"  # Not required, but helpful
    configfile: "../../config.yaml"

if not os.path.exists("../../data/align_QC"):
    os.makedirs("../../data/align_QC")

rule CollectMultipleMetrics:
    """
    This rule runs one or more of the metrics collection modules at the same time,
    and produces outputs of '.pdf' and '.txt' files for each module,
    except for the CollectAlignmentSummaryMetrics module.
    """
    input:
        alignment("../../data/STAR_ALIGN/"+config["FASTQS"]["prefix"]+".STARAligned.sortedByCoord.out.bam"),
        #reference genome
        os.path.join(config["GENOME_DIR"], config["GENOME_FASTA"])
    output:
        "data/align_QC/"+config["FASTQS"]["prefix"]+".multiple_metrics.txt"
    shell:
        "picard CollectMultipleMetrics I={input[0]} ASSUME_SORTED=TRUE O={output[0]} R={input[1]}"

rule MarkDuplicates:
    """
    This tool locates and tags duplicate reads in a BAM or SAM file.
    """
    input:
        alignment("../../data/STAR_ALIGN/"+config["FASTQS"]["prefix"]+".STARAligned.sortedByCoord.out.bam")
    output:
        "data/align_QC/"+config["FASTQS"]["prefix"]+".marked_duplicates.bam",
        "data/align_QC/"+config["FASTQS"]["prefix"]+".marked_dup_metrics.txt"
    shell:
        "picard MarkDuplicates I={input[0]} O={output[0]} M={output[1]}"

rule CollectRnaSeqMetrics:
    """
    This tool takes a SAM/BAM file containing the aligned reads from
    and produces metrics describing the distribution of the bases within the transcripts.
    """
    input:
        alignment("../../data/STAR_ALIGN/"+config["FASTQS"]["prefix"]+".STARAligned.sortedByCoord.out.bam"),
        os.path.join(config["GENOME_DIR"], "refFlat.txt"),
        os.path.join(config["GENOME_DIR"], "rRNA.txt")
    output:
        "data/align_QC/"+config["FASTQS"]["prefix"]+".RNA_Metrics.txt"
    shell:
        "picard CollectRnaSeqMetrics I={input[0]} O={output[0]} REF_FLAT={input[1]} "
        "STRAND=SECOND_READ_TRANSCRIPTION_STRAND RIBOSOMAL_INTERVALS={input[2]}"

rule CollectInsertSizeMetrics:
    """
    This rule outputs the percentages of read pairs in each of the three orientations (FR, RF, and TANDEM) as a histogram.
    """
    input:
        alignment("../../data/STAR_ALIGN/"+config["FASTQS"]["prefix"]+".STARAligned.sortedByCoord.out.bam")
    output:
        "data/align_QC/"+config["FASTQS"]["prefix"]+".insert_size_metrics.txt",
        "data/align_QC/"+config["FASTQS"]["prefix"]+".insert_size_histogram.pdf"
    shell:
        "picard CollectInsertSizeMetrics I={input[0]} O={output[0]} H={output[1]}"

rule CollectAlignmentSummaryMetrics:
    """
    This rule read a BAM file and produce standard alignment metrics that would be applicable to any alignment.
    """
    input:
        alignment("../../data/STAR_ALIGN/"+config["FASTQS"]["prefix"]+".STARAligned.sortedByCoord.out.bam"),
        #reference genome
        os.path.join(config["GENOME_DIR"], config["GENOME_FASTA"])
    output:
        "data/align_QC/"+config["FASTQS"]["prefix"]+".CollectalignmentSummaryMetricsoutput.txt"
    shell:
        "picard CollectAlignmentSummaryMetrics R={input[1]} INPUT={input[0]} OUTPUT={output[0]}"

rule CollectGcBiasMetrics:
    """
    This rule collects information about the relative proportions of guanine (G) and
    cytosine (C) nucleotides in a sample.
    """
    input:
        alignment("../../data/STAR_ALIGN/"+config["FASTQS"]["prefix"]+".STARAligned.sortedByCoord.out.bam")
    output:
        "data/align_QC/"+config["FASTQS"]["prefix"]+".GC_bias_metrics.txt",
        "data/align_QC/"+config["FASTQS"]["prefix"]+".GC_bias_metrics.pdf",
        "data/align_QC/"+config["FASTQS"]["prefix"]+".summary_metrics.txt"
    shell:
        "picard CollectGcBiasMetrics I={input[0]} O={output[0]} CHART={output[1]} S={output[2]}"


rule feature_counts:
    """
    This rule takes as input SAM/BAM files and an annotation file including
    chromosomal coordinates of features.
    It outputs numbers of reads assigned to features (or meta-features).
    It also outputs stat info for the overall summrization results.
    """
    input:
        alignment(os.path.join("../../data/STAR_ALIGN", config["FASTQS"]["prefix"] + ".STARAligned.sortedByCoord.out.bam")),
        os.path.join(config["GENOME_DIR"], config["GENOME_GTF"]),
        os.path.join(config["GENOME_DIR"], config["GENOME_FASTA"])
    output:
        os.path.join("../../data/align_QC", config["FASTQS"]["prefix"] + ".counts.txt"),
        "../../log/"+config["FASTQS"]["prefix"]+".featureCounts.out"
    shell:
        "featureCounts -p -C -t exon -g gene_id -M --fraction -s 2 "
        "-a {input[1]} -o {output} {input[0]} >> {output[1]}"

rule RNA_seQC:
    """
    This rule input one or more BAM files.
    The output consists of HTML reports and tab delimited files of series of quality control metrics.
    """
    input:
        alignment("../../data/STAR_ALIGN/"+config["FASTQS"]["prefix"]+".STARAligned.sortedByCoord.out.bam"),
        os.path.join(config["GENOME_DIR"], config["GENOME_GTF"]),
        os.path.join(config["GENOME_DIR"], config["GENOME_FASTA"])
    output:
        "../../data/STAR_ALIGN/"+config["FASTQS"]["prefix"]+".STARAligned.sortedByCoord.out.bam.bai",
        os.path.join("../../data/align_QC", config["FASTQS"]["prefix"] + ".testReport/"),
        "../../log/"+config["FASTQS"]["prefix"]+".RNA-SeQC.out"
    run:
        shell("samtools index {input[0]} {output[0]}")
        #run rna-seqc
        shell("rna-seqc -n 1000 -s {input[0]} -t {input[1]} -r {input[2]} -o {output[1]} >> {output[2]}")

rule Mt_percentage:
    """
    This rule calculates the percentage of the number of chromosomes that aligned to the reference genes.
    """
    input:
        alignment("../../data/STAR_ALIGN/"+config["FASTQS"]["prefix"]+".STARAligned.sortedByCoord.out.bam")
    output:
        os.path.join("../../log", config["FASTQS"]["prefix"] + ".Mt.txt")
    shell:
        "echo '100 * $(samtools view -c {input[0]} chrM) / $(samtools view -c {input[0]})' | bc -l > {output[0]}"
