"""
__authors__: Kevin Chau, Hanqing Zhao, Weixiu Dong
__date__: 2019-05-21
__description__: This snakefile is for trimming the input sequence reads by cutadapt, and
generating index file, which will be used during alignment to rapidly look up where
each read came from, by STAR.
"""

import os

configfile: "../../config.yaml"

subworkflow input_QC:
    workdir: "../input_QC"
    snakefile: "../input_QC/Snakefile"
    configfile: "../../config.yaml"

# Setup pipeline directories
if not os.path.exists("data"):
    os.makedirs("data")
if not os.path.exists("log"):
    os.makedirs("log")

rule cutadapt_trim:
    """
    This rule is for trimming the input sequence reads fastq file to remove the adapter,
    primer, poly-A tail and other unwanted sequences.
    The file takes the raw fastq files as input and output the trimmed fastq files.
    """
    input:
        read1 = os.path.join("../../source", config["FASTQS"]["read1"] + ".fastq"),
        read2 = os.path.join("../../source", config["FASTQS"]["read2"] + ".fastq")
    output:
        trim_1 = os.path.join("data",config["FASTQS"]["read1"] + ".trimmed.fastq"),
        trim_2 = os.path.join("data",config["FASTQS"]["read2"] + ".trimmed.fastq")
    shell:
        "cutadapt --minimum-length=5 --output {output[0]} "
        "--paired-output {output[1]} -A XXX -q 30 {input}"

#Create the output directory for STAR if it doesn't exists.
if not os.path.exists(os.path.join(config["GENOME_DIR"], "STAR_INDEX")):
    os.makedirs(os.path.join(config["GENOME_DIR"], "STAR_INDEX"))

rule star_refIndex:
    """
    This rule creates the index files from the reference genome fasta file and
    annotation gtf file. It outputs the three files which will be used in alignment.
    """
    input:
        os.path.join(config["GENOME_DIR"], config["GENOME_FASTA"]),
        os.path.join(config["GENOME_DIR"], config["GENOME_GTF"])
    params:
        outdir = os.path.join(config["DISK_DIR"])
    output:
        os.path.join(config["DISK_DIR"], "Genome"),
        os.path.join(config["DISK_DIR"], "SA"),
        os.path.join(config["DISK_DIR"], "SAindex")
    shell:
        "STAR --runThreadN 16 --runMode genomeGenerate "
        "--genomeDir {params.outdir} "
        "--genomeFastaFiles {input[0]} "
        "--sjdbGTFfile {input[1]}"

#rerun the fastqc for the trimmed data
rule QC_trimmed:
    """
    This rule run fastqc on the trimmed data to see the improvement.
    It will output the result html files in the input_QC folder.
    """
    input:
        trim_1 = os.path.join("data",config["FASTQS"]["read1"] + ".trimmed.fastq"),
        trim_2 = os.path.join("data",config["FASTQS"]["read2"] + ".trimmed.fastq")
    output:
        os.path.join("../../data/input_QC", config["FASTQS"]["read1"]+".trimmed_fastqc.html"),
        os.path.join("../../data/input_QC", config["FASTQS"]["read2"]+".trimmed_fastqc.html")
    shell:
        "fastqc -o ../../data/input_QC {input[0]} {input[1]}"
